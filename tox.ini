# To run the unit tests against multiple python versions you will need
# the necessary python versions installed, and Tox.
#   pip install tox
#   tox
[tox]
envlist =
    #
    # IMPORTANT!
    #
    # the format of this env list needs to be kept in sync
    # with .github/workflows/django.yml

    # in order to keep things fast & manageable we don't cover every single
    # permutation but this should give decent coverage
    test-{py38,py39,py310,py311}-django32-{mysql,postgres}-extras
    test-{py38,py311}-django32-{mysql,postgres}

    test-{py38,py39,py310,py311}-django42-{mysql,postgres}-extras
    test-{py38,py311}-django42-{mysql,postgres}

    # mypy checks
    # we only run this against the lowest version python
    mypy-py38-{django32,django42}-{mysql,postgres}-extras

min_version = 4

isolated_build = true

[testenv]
setenv =
    TOX=1
    # by doing this with env vars we only run 1 "poetry install"
    # invocation which helps reduce wasteful remove/re-install packages
    extras: EXTRA_GENERIC="extras"
    mysql: EXTRA_MYSQL="mysql"
    postgres: EXTRA_POSTGRES="postgres"
    mypy: DEV="--with=dev"
passenv =
    CI_*
    HOME
    MYSQL_*
    DB*
    SECRET_KEY
    PGDATABASE
    MYSQLCLIENT_CFLAGS
    MYSQLCLIENT_LDFLAGS

allowlist_externals =
    poetry
commands_pre =
    poetry install --no-root --sync --extras "{env:EXTRA_GENERIC} {env:EXTRA_MYSQL} {env:EXTRA_POSTGRES}" {env:DEV}
deps =
    django32: Django==3.2.*
    django42: Django==4.2.*
change_dir =
    test: src
commands =
    test-mysql: python manage.py test --noinput {posargs}
    # Randomly postgres teardown doesn't work; there are connections held open
    # so the DB can't be dropped.
    # allianceutils has no test cases so we just use it to ensure the DB is dropped
    # first before running the real test cases in test_allianceutils
    test-postgres: python manage.py test --noinput allianceutils
    test-postgres: python manage.py test --noinput --keepdb {posargs}

    mypy: mypy src
