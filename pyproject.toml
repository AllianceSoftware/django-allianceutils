[tool.poetry]
name = "django-allianceutils"
version = "3.0.0"
description = "Alliance Software common utilities for Django"
repository = "https://github.com/AllianceSoftware/django-allianceutils/"
homepage = "https://github.com/AllianceSoftware/django-allianceutils/"
documentation = "https://github.com/AllianceSoftware/django-allianceutils/blob/master/README.md"
authors = ["Alliance Software <support@alliancesoftware.com.au>"]
license = "BSD-2-Clause"
readme = "README.md"
packages = [
    { include = "allianceutils", from = "src" },
]
include = [
    "CHANGELOG.md",
	"LICENSE",
    "src/allianceutils/py.typed",
]
keywords = [
    "django",
    'alliance',
    'alliancesoftware',
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: 3.2",
    "Framework :: Django :: 4.2",
    "Intended Audience :: Developers",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Typing :: Typed",
]

[tool.poetry.urls]
issues = "https://github.com/AllianceSoftware/django-allianceutils/issues"


[tool.poetry.dependencies]
# you need the <4.0 for cachetools which is a tox dependency
python = ">=3.8,<4.0"

# the only hard dependency is django; everything else is only required
# if you use functions/classes that require them
#
# IMPORTANT
# We need to specify a minimum django version that this package requires, but
#   this means that when poetry creates a lock file that it will pick the latest
#   version available
# For development purposes we will override this in tox to install a specific
#   version
# It's not possible to natively get poetry to use a different version for dev
#   via groups or extras because it only resolves dependencies once (globally)
#   see https://github.com/python-poetry/poetry/issues/6611
Django = ">=3.2"
typing_extensions = "^4.5.0"

# optional extras
django-filter = { version = "*", optional = true }
django-storages = { version = "*", optional = true }
djangorestframework = { version = "*", optional = true }
isort = { version = ">=5", optional = true }
logging_tree = { version = "*", optional = true }
rules = { version = "*", optional = true }

# optional databases
mysqlclient = { version = "*", optional = true }
psycopg2 = { version = "*", optional = true }


[tool.poetry.extras]
extras = [
	"django-filter",
	"django-storages",
	"djangorestframework",
	"isort",
	"logging_tree",
	"rules",
]
mysql = ["mysqlclient"]
postgres = ["psycopg2"]


[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
isort = ">=5"
tox = ">=4"

mypy = ">=1.3"
django-filter-stubs = "*"
django-stubs = "*"
djangorestframework-stubs = "*"
types-mysqlclient = "*"
types-psycopg2 = "*"
types-Werkzeug = "*"


# ===================================================================================================================
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


# ===================================================================================================================
[tool.isort]
force_single_line = true
force_sort_within_sections = true
line_length = 110
order_by_type = false
skip_glob = [
	"*/.tox/*",
	"*/node_modules/*.py",
	"*/migrations/0*.py",
	"*/settings/*.py",
]
# stdlib that may be backported or not always there
extra_standard_library=[
	"pkg_resources",
	"setuptools",
	"typing",
]

# packages that we may have made local modifications to or are checked out from github
# IsortTestCase has expectations about what is set here:
known_third_party=["test_allianceutils.tests.isort_force_thirdparty"]
#known_first_party=["allianceutils"]

# ===================================================================================================================

[tool.mypy]
python_version = "3.8"
plugins = [
	"mypy_django_plugin.main",
	"mypy_drf_plugin.main",
]
#exclude = ['/migrations/', 'bin/', 'venv/', '/tests/']
# mypy_path is needed because mypy won't look for config in ancestor dirs:
#  https://github.com/python/mypy/issues/3377#issuecomment-302308046
mypy_path = '$MYPY_CONFIG_FILE_DIR/src'
# default files to check if none given on command line
files = '$MYPY_CONFIG_FILE_DIR/src/**/*.py'


allow_redefinition = false
allow_untyped_globals = false
# ignore_missing_imports tells mypy to just not check 3rd party missing stubs
#   module = ["pghistory", "docutils", "PyPDF2", "OpenSSL", "pyppetter", "pgtrigger", "..."]
# is one workaround but it will fail whenever a new module gets enabled here. yikes.
#ignore_missing_imports = true
#module = [
#	"rules",
#]
ignore_missing_imports = false
check_untyped_defs = true
# disallow_any_unimported = true
# disallow_incomplete_defs = true
disallow_untyped_calls = false
disallow_untyped_decorators = true
# disallow_untyped_defs = true  # if you adopt this then will want to do it on a module-by-module basis
ignore_errors = false
implicit_optional = false
implicit_reexport = false
local_partial_types = true
show_error_codes = true
strict_optional = true
strict_equality = true
no_implicit_optional = true
warn_redundant_casts = true
# warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
warn_unreachable = true
warn_no_return = true

#[tool.mypy-isort.*]
#module = [
#	"isort.*",
#	"rules",
#]
#ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "isort"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "isort.api"
no_implicit_reexport = false

[[tool.mypy.overrides]]
module = "logging_tree"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "rules"
ignore_missing_imports = true

[tool.django-stubs]
django_settings_module = "test_allianceutils.settings"